--- aptitude-0.2.11.1/src/generic/config_signal.h.orig	Thu Nov 22 16:20:01 2001
+++ aptitude-0.2.11.1/src/generic/config_signal.h	Sun Jan 19 14:12:11 2003
@@ -59,7 +59,7 @@
   // http fetcher.
   Configuration *real_config, *theme_config;
 
-  typedef std::hash_map<string, SigC::Signal1<void, string> *> connhash;
+  typedef __gnu_cxx::hash_map<string, SigC::Signal1<void, string> *> connhash;
 
   connhash conn_table;
 
--- aptitude-0.2.11.1/src/generic/pkg_hier.cc.orig	Sat Aug 25 16:27:33 2001
+++ aptitude-0.2.11.1/src/generic/pkg_hier.cc	Sun Jan 19 14:16:40 2003
@@ -12,6 +12,7 @@
 #include "../aptitude.h"
 
 using namespace std;
+using namespace __gnu_cxx;
 
 void pkg_hier::visit_item(pkg_hier::item *item, void *parent_data,
 			  pkg_hier::hierarchy_realizer *realizer)
--- aptitude-0.2.11.1/src/generic/pkg_hier.h.orig	Sat Aug 25 16:27:33 2001
+++ aptitude-0.2.11.1/src/generic/pkg_hier.h	Sun Jan 19 14:13:29 2003
@@ -64,7 +64,7 @@
   struct item
   {
     std::string name;
-    std::hash_set<std::string> parents;
+    __gnu_cxx::hash_set<std::string> parents;
 
     // HACK: Used to build the hierarchy top-down.  Calls an appropriate
     // routine in the given hierarchy class.  parent_data is an opaque
@@ -140,8 +140,8 @@
   // Used so that group numbers are contiguous and unique
   int max_group_id;
 
-  typedef std::hash_map<std::string, item> pkgmap;
-  typedef std::hash_map<std::string, group> groupmap;
+  typedef __gnu_cxx::hash_map<std::string, item> pkgmap;
+  typedef __gnu_cxx::hash_map<std::string, group> groupmap;
 
   pkgmap pkgs;
   groupmap groups;
--- aptitude-0.2.11.1/src/generic/strhash.h.orig	Fri Aug 10 03:24:36 2001
+++ aptitude-0.2.11.1/src/generic/strhash.h	Sun Jan 19 14:15:13 2003
@@ -26,11 +26,11 @@
 #include <string>
 
 #if defined(HAVE_HASH_MAP) || defined(HAVE_EXT_HASH_MAP)
-namespace std
+namespace __gnu_cxx
 {
-  struct hash<string>
+  struct hash<std::string>
   {
-    inline size_t operator()(const string &s) const
+    inline size_t operator()(const std::string &s) const
     {
       return hash<char *>()(s.c_str());
     }
--- aptitude-0.2.11.1/src/vscreen/config/colors.cc.orig	Sat Mar 16 04:40:13 2002
+++ aptitude-0.2.11.1/src/vscreen/config/colors.cc	Sun Jan 19 14:25:58 2003
@@ -40,6 +40,7 @@
 #include "../../generic/strhash.h"
 
 using namespace std;
+using namespace __gnu_cxx;
 
 int npairs=1;
 // FIXME: is this right?  I --assume-- that it is; the curses documentation
--- aptitude-0.2.11.1/src/vscreen/config/keybindings.cc.orig	Sat Mar 16 04:40:13 2002
+++ aptitude-0.2.11.1/src/vscreen/config/keybindings.cc	Sun Jan 19 14:27:04 2003
@@ -32,6 +32,7 @@
 #include <ctype.h>
 
 using namespace std;
+using namespace __gnu_cxx;
 
 keybindings global_bindings;
 
--- aptitude-0.2.11.1/src/vscreen/config/keybindings.h.orig	Sat Mar 16 04:40:13 2002
+++ aptitude-0.2.11.1/src/vscreen/config/keybindings.h	Sun Jan 19 14:26:47 2003
@@ -46,7 +46,7 @@
 
 class keybindings
 {
-  std::hash_map<std::string, keybinding> keymap;
+  __gnu_cxx::hash_map<std::string, keybinding> keymap;
 
   keybindings *parent;
 public:
@@ -57,7 +57,7 @@
   keybinding get(std::string tag)
     // Returns the keybinding for the given string.  Almost never needed.
   {
-    std::hash_map<std::string, keybinding>::iterator found=keymap.find(tag);
+    __gnu_cxx::hash_map<std::string, keybinding>::iterator found=keymap.find(tag);
 
     if(found==keymap.end())
       return keybinding();
--- aptitude-0.2.11.1/src/vscreen/vs_subtree.h.orig	Sat Apr  6 22:38:38 2002
+++ aptitude-0.2.11.1/src/vscreen/vs_subtree.h	Sun Jan 19 14:43:56 2003
@@ -39,7 +39,7 @@
 protected:
 
   typedef list<childtype *> child_list;
-  typedef child_list::iterator child_iterator;
+  typedef typename child_list::iterator child_iterator;
 
   class levelref:public vs_tree_levelref
   {
--- aptitude-0.2.11.1/src/vscreen/vs_treeitem.cc.orig	Sat Mar 16 04:40:13 2002
+++ aptitude-0.2.11.1/src/vscreen/vs_treeitem.cc	Sun Jan 19 14:30:23 2003
@@ -14,7 +14,7 @@
 }
 
 void vs_treeitem::paint(vs_tree *win, int y, bool hierarchical, string str,
-			int depth_shift=2)
+			int depth_shift /* =2 */)
 {
   int width, height;
   int basex=hierarchical?depth_shift*get_depth():0;
--- aptitude-0.2.11.1/src/vscreen/vs_util.cc.orig	Thu Nov 22 15:26:18 2001
+++ aptitude-0.2.11.1/src/vscreen/vs_util.cc	Sun Jan 19 14:30:51 2003
@@ -171,7 +171,7 @@
 }
 
 vscreen_widget *vs_dialog_fileview(string fn,
-				   Slot0Arg okslot=NULL)
+				   Slot0Arg okslot /* =NULL */)
 {
   return vs_dialog_fileview(fn, okslot,
 			    get_color("DefaultWidgetBackground")|A_REVERSE);
--- aptitude-0.2.11.1/src/dep_item.cc.orig	Sun Mar 24 19:50:17 2002
+++ aptitude-0.2.11.1/src/dep_item.cc	Sun Jan 19 14:47:14 2003
@@ -214,7 +214,7 @@
   set_root(setup_new_root(pkg, ver), true);
 }
 
-typedef hash_map<string, pkg_subtree *> tree_map;
+typedef __gnu_cxx::hash_map<string, pkg_subtree *> tree_map;
 
 template<class tree_type>
 void setup_package_deps(const pkgCache::PkgIterator &pkg,
--- aptitude-0.2.11.1/src/download_screen.h.orig	Sat Mar 16 04:40:11 2002
+++ aptitude-0.2.11.1/src/download_screen.h	Sun Jan 19 14:48:52 2003
@@ -46,7 +46,7 @@
 class download_item;
 
 #if defined(HAVE_HASH_MAP) || defined(HAVE_EXT_HASH_MAP)
-namespace std {
+namespace __gnu_cxx {
   struct hash<void *>
   {
     size_t operator()(void * __x) const { return (size_t) __x; }
@@ -67,7 +67,7 @@
 
 class download_screen:public vs_tree, public pkgAcquireStatus
 {
-  typedef std::hash_map<void *, download_item *> downloadmap;
+  typedef __gnu_cxx::hash_map<void *, download_item *> downloadmap;
   downloadmap active_items;
   // Makes it easy to find a currently downloading item when we get a hit
   // for it.
--- aptitude-0.2.11.1/src/edit_pkg_hier.cc.orig	Fri Sep 14 23:32:49 2001
+++ aptitude-0.2.11.1/src/edit_pkg_hier.cc	Sun Jan 19 14:49:41 2003
@@ -14,6 +14,7 @@
 #include <vscreen/vs_subtree.h>
 
 using namespace std;
+using namespace __gnu_cxx;
 
 // Stores a group (name) and a Y/N state
 class vs_hier_editor::vs_hier_item:public SigC::Object, public vs_treeitem
--- aptitude-0.2.11.1/src/pkg_grouppolicy.cc.orig	Sat Apr  6 22:42:00 2002
+++ aptitude-0.2.11.1/src/pkg_grouppolicy.cc	Sun Jan 19 14:52:08 2003
@@ -32,6 +32,7 @@
 #include <map>
 
 using namespace std;
+using namespace __gnu_cxx;
 
 // This special tree munges its tag to allow an integer to be prepended to it.
 // Ok, it's a dreadful hack.  I admit it.
